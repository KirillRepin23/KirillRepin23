# Задание 2
# Перед тобой датасет некой интернет-компании. Загрузи его в Python или R, ознакомься с данными и ответь на приведенные ниже вопросы. Для ответа на некоторые из них понадобится произвести расчеты, ход которых опиши в файле с кодом.

# Импортируем нужные библиотеки

import pandahouse as ph
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
import numpy as np
from datetime import date
from  scipy.stats import chi2_contingency
import holidays
from fbprophet import Prophet

%matplotlib inline

#Выгружаем датафрейм (далее - ДФ) из CSV
df = pd.read_csv('summer_camp_data.csv', encoding='windows-1251')

# Проверяем первые 5 строк ДФ
df.head()

# Проверяем информацию о ДФ
df.info()

# Проверяем описательную статистику ДФ
df.describe()

#a. Какой рекламный канал принёс больше всего дохода за всё время?

revenue_per_channel = df.groupby('source')\
                        .agg(total_revenue=('revenue','sum'))\
                        .idxmax()

# b.1. Как изменился средний чек транзакции после введения коронавирусных ограничений?

# Создаем колонку "выручка на транзакцию"
df['revenue_per_transaction'] = df.revenue.div(df.transactions)

# Изменяем формат колонки 'date' на datetime для корректного оформления оси Х графиков
df['date'] = pd.to_datetime(df.date)

# Высчитываем средний чек транзакции с группировкой по дате
avg_revenue_per_transaction = df.groupby('date')\
                                .agg({'revenue_per_transaction':'mean'})

# Устанавливаем настройки графика
sns.set(font_scale = 1.5,
        rc         = {'figure.figsize':(20,7)})
sns.set_style('darkgrid',
             {'axes.facecolor': '0.9',
              'grid.color': '0.5',
              'figure.facecolor': '0.95'})

# Строим график
ax = sns.lineplot(data = avg_revenue_per_transaction, x = 'date', y = 'revenue_per_transaction')
# График "зашумлен"

# Для получения более наглядного графика находим скользящее среднее с окном 15 дней, строим график
avg_revenue_per_transaction.revenue_per_transaction.rolling(15, min_periods=1).mean().plot(colormap = 'gist_rainbow') # Красный

# Вывод: после введения коронавирусных ограничений наблюдается резкий спад (200-250 пунктов) среднего чека транзакции.

# b.2. Как изменился средний чек транзакции для пользователей, покупающих с промокодом и без? (параметр «promo_activated»)

# График для данных с параметром «promo_activated» = yes - Красный
df.query("promo_activated == 'yes'")\
  .groupby('date')\
  .agg({'revenue_per_transaction':'mean'})\
  .revenue_per_transaction\
  .rolling(15, min_periods=1)\
  .mean().plot(colormap = 'gist_rainbow')

# График для данных с параметром «promo_activated» = no - Синий
df.query("promo_activated == 'no'")\
  .groupby('date')\
  .agg({'revenue_per_transaction':'mean'})\
  .revenue_per_transaction\
  .rolling(15, min_periods=1)\
  .mean().plot(colormap = 'plasma')
 
# Вывод: после введения коронавирусных ограничений наблюдается спад среднего чека транзакции как для транзакций с прокодом, так и без. Однако, после спада средний чек транзакции с промокодом практически вернулся к значениям до введения ограничений,тогда как средний чек транзации без промокода такого восстановления не имел.


# c. Можно ли с уверенностью в 95% сказать, что CR (коэффициент конверсии в транзакцию) в выходные дни отличается от CR в будние дни?

# Для ответа на данный вопрос нужно удостовериться в стат. значимости различий конверсии в выходные и будние дни.

df.head()

# Соберем количество пользователей на каждом шаге воронки за каждую дату
df_groupped = df.groupby('date', as_index=False) \
                .agg({'pageviews': 'sum', 'visits': 'sum', 'productClick': 'sum', 'addToCart': 'sum', 'checkout': 'sum', 'transactions': 'sum'})
df_groupped.head()

# Создадим признак выходной день или нет
df_groupped['weekend'] = 0
df_groupped.head()

# Где выходной - 1, где будний - 0
df_groupped.loc[df_groupped.date.dt.day_name() == 'Saturday', 'weekend'] = 1
df_groupped.loc[df_groupped.date.dt.day_name() == 'Sunday', 'weekend'] = 1
df_groupped.head()

# Будем исследовать значение конверсии на шаге pageviews -> transactions

# Суммируем пользователей на шагах 'pageviews' и 'transactions' в зависимости от значения признака 'weekend'

df_groupped_weekend = df_groupped.groupby('weekend', as_index = False) \
                                 .agg({'pageviews': 'sum', 'transactions': 'sum'})
df_groupped_weekend

# Суммируем пользователей на шагах 'pageviews' и 'transactions' в зависимости от значения признака 'weekend'
df_groupped_weekend = df_groupped.groupby('weekend', as_index = False) \
                                 .agg({'pageviews': 'sum', 'transactions': 'sum'})
df_groupped_weekend

# Считаем конверсию из просмотра страницы в транзакцию
df_groupped_weekend['CR'] = df_groupped_weekend.transactions * 100 / df_groupped_weekend.pageviews
df_groupped_weekend

# Видим, что конверсия в выходные дни выше на 0.3%. Проверим является ли эта разница стат. значимой. Для оценки стат. значимости различий конверсии в группах используем критерий хи-квадрат. За нулевую гипотезу принимается отсутствие различий конверсии в группах.

# Преобразуем данные в массив для работы со стат. методом
kf_data = np.array([[df_groupped_weekend.pageviews[0], df_groupped_weekend.transactions[0]], 
                    [df_groupped_weekend.pageviews[1], df_groupped_weekend.transactions[1]]])
# В данном случае по умолчанию уровень значимости равен 5%
kf = chi2_contingency(kf_data)
print(f'Значение статистики хи-квадрат: {kf[0]}')
print(f'P-value: {kf[1]}')

#Значение статистики хи-квадрат: 1049.14488704198
#P-value: 3.7341501632639707e-230
#Вывод: Так как при выбранном уровне значимости (5%) значение p-value < 0.05, то мы можем отвергнуть нулевую гипотезу. Конверсии в группах стат. значимо различаются. В выходные конверсия в транзакцию выше.

# d. Вам необходимо спрогнозировать объем дохода, полученного с пользователей, приведенных на сайт контекстной рекламой (medium = cpc) на полгода вперед. Опишите, как бы вы подошли к этой задаче и какие дополнительные данные вам понадобятся?

# Для решения данной задачи можно использовать библиотеку для прогнозирования временных рядов Prophet, которая использует для построения прогноза аддитивную регрессионную модель:
# Y(t) = a(t) + b(t) + c(t) + Err, где:

# a(t) - сезонные компоненты (годовые, месячные, недельные и т.д.).
# b(t) - тренд, где учитываются как исторические данные, так и события заданные вручную (например релиз нового функционала ПО/услуги/продукта).
# c(t) - аномалии (регулярные и нерегулярные).
# Err - ошибка - содержит информацию, которая не учтена моделью.

# Таким образом для того, чтобы построить качественный прогноз желательно наличие следующих данных:

# -Инфо о сезонных колебаниях спроса на рекламируемый товар или услугу (с учетом праздничных дней).
# -Исторические данные о ситуации на исследуемом рынке, инфо о бюджетах рекламных компаний (прошлых и предстоящих), данные по конверсии и другим метрикам прошлых компаний для выявления трендов. Чем больше данных, тем лучше,но ценность "свежих" данных выше.
# -Инфо о предстоящих событиях (например, релиз нового продукта, ребрендинг).
# -Инфо о том, как ведут себя покупатели в аномальные дни (например Black Friday).
# -Модель влияния коронавируса и связанных с ним ограничений на исследуемый рынок.
# -Анализ рисков исследуемого рынка для построения нескольких вариантов прогноза: позитивного, умеренного и негативного.
